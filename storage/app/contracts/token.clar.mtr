<# The template for generating the contract.
Uses MTRGen and Pars'Em under the hood #>

<% if !$removeWatermark %>
;; SIP-010 token <% name %> created by Stacks TokenFactory
;; https://factory.matronator.cz
<% endif %>

<# (impl-trait .ft-trait.sip-010-trait) #>
(impl-trait '<% if $chain === 'mainnet' %>SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE<% else %>ST1NXBK3K5YYMD6FD41MVNP3JS1GABZ8TRVX023PT<% endif %>.sip-010-trait-ft-standard.sip-010-trait)

(define-fungible-token <% name|kebabCase %><% if $tokenSupply > 0 %> u<% tokenSupply %><% endif %>)

(define-constant ERR_ADMIN_ONLY (err u401))
(define-constant ERR_EXCEEDS_MAX_AMOUNT (err u402))
(define-constant ERR_NOT_TOKEN_OWNER (err u403))

(define-constant CONTRACT_OWNER tx-sender)
<% if $mintable === true %>
<% if $mintAmount > 0 %>
(define-constant MAX_MINT_AMOUNT u<% mintAmount %>)
<% endif %>
<% endif %>

(define-data-var token-uri (optional (string-utf8 256)) (some u"<% tokenUri %>"))

;; SIP-010 Trait Implementation
(define-read-only (get-balance (owner principal))
  (ok (ft-get-balance <% name|kebabCase %> owner)))

(define-read-only (get-total-supply)
  (ok (ft-get-supply <% name|kebabCase %>)))

(define-read-only (get-name)
  (ok "<% name %><% if !$removeWatermark %> by TokenFactory<% endif %>"))

(define-read-only (get-symbol)
  (ok "<% tokenSymbol|upper %>"))

(define-read-only (get-decimals)
  (ok u<% tokenDecimals %>))

(define-read-only (get-token-uri)
  (ok (var-get token-uri)))

(define-public (set-token-uri (value (string-utf8 256)))
    (begin
        (asserts! (is-eq tx-sender CONTRACT_OWNER) (err ERR_ADMIN_ONLY))
        (var-set token-uri (some value))
        (ok (print {
              notification: "token-metadata-update",
              payload: {
                contract-id: (as-contract tx-sender),
                token-class: "ft"}}))))

(define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))
    (begin
      (asserts! (or (is-eq tx-sender from) (is-eq contract-caller from)) ERR_NOT_TOKEN_OWNER)
      (try! (ft-transfer? <% name|kebabCase %> amount from to))
      (match memo to-print (print to-print) 0x)
      (ok true)))

<% if $mintable === true %>
;; Minting
(define-public (mint <% if !$mintFixedAmount %>(amount uint) <% endif %>(recipient principal))
  (begin
<% if !$allowMintToAll %>
    (asserts! (is-eq tx-sender CONTRACT_OWNER) ERR_ADMIN_ONLY)
<% endif %>
<% if !$mintFixedAmount %>
<% if $mintAmount > 0 %>
    (asserts! (<= amount MAX_MINT_AMOUNT) (err ERR_EXCEEDS_MAX_AMOUNT))
<% endif %>
<% endif %>
    (ft-mint? <% name|kebabCase %> <% if !$mintFixedAmount %>amount<% else %>u<% mintAmount %><% endif %> recipient)
  )
)
<% endif %>

;; Utility functions
(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))
  (fold check-err (map send-token recipients) (ok true)))

(define-private (check-err (result (response bool uint)) (prior (response bool uint)))
  (match prior ok-value result err-value (err err-value)))

(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))
  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient)))

(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))
  (let ((transferOk (try! (transfer amount tx-sender to memo))))
    (ok transferOk)))

(define-private (send-stx (recipient principal) (amount uint))
  (begin
    (try! (stx-transfer? amount tx-sender recipient))
    (ok true)))

(begin
  (try! (send-stx '<% serviceAddress %> u<% deployCost %>))
<% if $initialAmount > 0 %>
  (try! (ft-mint? <% name|kebabCase %> u<% initialAmount %> CONTRACT_OWNER))
<% endif %>
<% if !$mintable %>
  (try! (ft-mint? <% name|kebabCase %> u<% tokenSupply %> CONTRACT_OWNER))
<% endif %>
)
